/*
 *  docker-image-builder
 *  --
 *  Copyright (c) 2016 Baidu, Inc. All Rights Reserved.
 *  --
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.baidu.ubqa.dockerfile;

import com.baidu.ubqa.dockercommand.CommandGenerator;
import com.baidu.ubqa.dockercommand.DockerCommand;
import com.baidu.ubqa.entity.*;
import com.baidu.ubqa.entity.Image;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

import com.baidu.ubqa.utils.Constants;
import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
/**
 * Created by zhaoming03 on 2017/12/5.
 */
public class DockerFileMaker {

    private Logger logger = LoggerFactory.getLogger(DockerFileMaker.class);

    public String makeFileContent(Image image) {
        StringBuilder dockerFileContent = new StringBuilder();
        CommandGenerator commandBuilder = new CommandGenerator();

        // From Base Image
        dockerFileContent.append(commandBuilder.generateCommonBlock(
                DockerCommand.FROM, image.getBaseImage().getRepository()));

        // MAINTAINER
        dockerFileContent.append(commandBuilder.generateCommonBlock(
                DockerCommand.MAINTAINER,
                image.getRegistry().getEmail()));

        // default user root
        dockerFileContent.append(commandBuilder.generateCommonBlock(DockerCommand.USER, Constants.DEFAULT_BUILD_USER));

        //ENV
        //merge all components envs
        List<EnvironmentVariable> envs = image.getAllEnvs();
        dockerFileContent.append(commandBuilder.generateEnvBlock(envs));

        //EXPOSE
        //merge all expose ports
        List<Port> ports = image.getAllPorts();
        dockerFileContent.append(commandBuilder.generateExposeBlock(ports));

        // Upload Files;
        if(!CollectionUtils.isEmpty(image.getAllFiles())){
            for(UploadFileMeta file : image.getAllFiles()) {
                //Add will decompress by default, except war
                if(file.isRequireDecompress()){
                    dockerFileContent.append(commandBuilder.generateAddLine(file.getFileName(),file.getDestination()));
                    if(file.getFileName().endsWith(".war")) {
                        dockerFileContent.append(commandBuilder.generateRunLine("cd " + file.getDestination() + "&& jar -xvf *.war && rm -f  *.war"));
                    }
                }else{
                    dockerFileContent.append(commandBuilder.generateCopyLine(file.getFileName(),file.getDestination()));
                }
            }
        }

        //IntegratedScript
        List<Script> integratedScript = image.getAllIntegratedScriptsByPriority();
        dockerFileContent.append(commandBuilder.generateRunLine(integratedScript));

        //assert to User;
        if(!StringUtils.isEmpty(image.getRunningUser()) && !Constants.DEFAULT_BUILD_USER.equals(image.getRunningUser())){
            String user = StringUtils.isEmpty(image.getRunningUserGroup()) ? image.getRunningUser() : (image.getRunningUser() + ":" + image.getRunningUserGroup());
            dockerFileContent.append(commandBuilder.generateCommonBlock(DockerCommand.USER,user));
            dockerFileContent.append(commandBuilder.generateCommonBlock(DockerCommand.RUN, String.format("chown -R %s %s", user, image.getWorkdir())));

        }


        //EntryPoint, which is generated by run scripts.
        dockerFileContent.append(commandBuilder.generateCommonBlock(DockerCommand.ENTRYPOINT,"[\""+ image.getWorkdir() +"/"+ "entrypoint.sh\"]"));

        return dockerFileContent.toString();
    }

    private String generateUploadFileBlock(List<UploadFileMeta> files) {
        for (UploadFileMeta file : files) {
            if (file.isRequireDecompress()) {
                logger.info("//todo");
            }
        }
        return "";
    }





}
